# Generated by Django 2.2.6 on 2019-10-30 19:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('app_informacion', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'paciente'), (2, 'recepcionista'), (3, 'medico'), (4, 'administrador')])),
                ('documento', models.BigIntegerField(unique=True, validators=[django.core.validators.RegexValidator(code='nomatch', message='El documento introducido debe ser de 8 dígitos', regex='[0-9]{8}$')])),
                ('domicilio', models.CharField(max_length=100)),
                ('telefono', models.BigIntegerField(validators=[django.core.validators.RegexValidator(message='Introduzca un numero de teléfono válido, con la forma "+011-123456", o sea: "+", característica provincial, "-" (guión), y por último número de teléfono. En caso de ser celular, omita el "15".', regex='[0-9]{2,4}-[0-9]{6}$')])),
                ('nacimiento', models.DateTimeField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('genero', models.PositiveSmallIntegerField(choices=[(1, 'masculino'), (2, 'femenino')])),
                ('penalizado', models.BooleanField(default=False)),
                ('fecha_despenalizacion', models.DateTimeField(blank=True, null=True, verbose_name='fecha de despenalización')),
                ('obra_social', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_informacion.ObraSocial')),
            ],
        ),
        migrations.CreateModel(
            name='Medico',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('cuil', models.BigIntegerField(unique=True, validators=[django.core.validators.RegexValidator(code='nomatch', message='La constancia de CUIL introducida debe ser de formato "XX-XXXXXXXX-X".', regex='[0-9]{2}-[0-9]{8}-[0-9]$')])),
                ('especialidad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_informacion.Especialidad')),
            ],
        ),
    ]
